Note GitHub is a website where we can store our repositories online. In other
 words, GitHub works with Git as a 
repository hosting service.


Git is officially defined as a *distributed version control system* (VCS).

In other words, it's a system that tracks changes to our project files 
over time. It enables us to record project changes and go back to a specific 
version of the tracked files, 
at any given point in time.

### Git  Basic Commands
1: git --version
 It should return the Git version that is installed on your computer.

 ### Configuring Your Name & Email
2: git config --global user.name "Your Name"
git config --global user.email "your@email.com"
In your terminal, run the following commands to identify yourself with Git:


### Initializing a repository
3:  git init
This command will generate a hiddenÂ .gitÂ directory for your project, where Git stores all 
internal tracking data for the current repository.


###  Staging and committing code
Before we can commit our code, we need to place it inside the staging area.

###  Checking the status
4: git status
This is a command that is very often used when working with Git.  
It shows us which files have been changed, which files are tracked, etc.

### Staging files

From the project folder, we can use the **git add** command to add our files to the staging area, 
which allows them to be tracked.

We can add a specific file to the staging area with the following command:


5: git add file.js


To add multiple files, we can do this:


6: git add file.js file2.js file3.js

Instead of having to add the files individually, we can also add all the files 
inside the project folder to the staging area:


7: git add .

By default, this adds **all the files and folders** inside the project folder
to the staging area, from where they are ready to be committed and tracked.




### Making commits

 A **commit** is a snapshot of our code at a particular time, which we are saving to 
 the commit history of our repository. After adding all the files that we want to track 
 to the staging area with the `**git add`** command, we are ready to make a commit.

To commit the files from the staging area, we use the following command:


8: git commit -m "Commit message"


Inside the quotes, we should write a **commit message** which is used to identify it in
 the commit history.

The commit message should be a descriptive summary of the changes that you are committing 
to the repository.

After executing that command, you will get the technical details about the commit printed
 in the terminal. And that's basically it, you have successfully made a commit in your
  project!


ðŸ“Œ To create a new commit, you will need to repeat the process of adding files to the 
staging area and then committing them after. Again, it's very useful to use 
the **git status** command to see which files were modified, staged, or untracked.



### Commit history

To see all the commits that were made for our project, you can use the 
following command:
9:  git log
The logs will show details for each commit, like the author name, the generated
 hash for the commit, date and time of the commit, and the commit message that 
we provided.


To go back to a previous state of your project code that you committed, you can use the 
following command:


git checkout <commit-hash>


Replace `<commit-hash>` with the actual hash for the specific commit that you want 
to visit, which is listed with the `git log` command.

To go back to the latest commit (the newest version of our project code), you can type
 this command:
 
git checkout master




## Ignoring files

To ignore files that you don't want to be tracked or added to the staging area, you 
can create a file called `.gitignore` in your main project folder.

Inside of that file, you can list all the file and folder names that you definitely 
do not want to track (each ignored file and folder should go to a new 
line inside the **.gitignore** file).


# Branches

A **branch** could be interpreted as an individual timeline of our project commits.

With Git, we can create many of these alternative environments (i.e. we can create different **branches**) so other versions of our project code can exist and be tracked in parallel.

That allows us to add new (experimental, unfinished, and potentially buggy) features in separate branches, without touching the '*official'* stable version of our project code (which is usually kept on the **master** branch).

When we initialize a repository and start making commits, they are saved to the **master** branch by default.

## Creating a new branch

You can create a new branch using the following command:


git branch <new-branch-name>


The new branch that gets created will be the reference to the current state of 
your repository.


ðŸ“Œ It's a good idea to create a **development** branch where you can
work on improving your code, adding new experimental features, and similar.
 After development and testing these new features to make sure they don't 
 have any bugs and that they can be used, you can merge them to the master branch.



##  Changing branches

To switch to a different branch, you use the **git checkout** command:


git checkout <branch-name>


With that, you switch to a different isolated timeline of your project by 
changing branches.


ðŸ“Œ For example, you could be working on different features in your code and have a separate branch for each feature. When you switch to a branch, you can commit code changes which only affect that particular branch. Then, you can switch to another branch to work on a different feature, which won't be affected by the changes and commits made from the previous branch.


To create a new branch and change to it at the same time, you can use the **-b** flag:

```bash
git checkout -b <new-branch-name>
```


To list the branches for your project, use this command: `git branch`



To go back to the **master** branch, use this command:

git checkout master


## Merging branches

You can merge branches in situations where you want to implement the code changes 
that you made in an individual branch to a different branch.

For example, after you fully implemented and tested a new feature in your code, you 
would want to merge those changes to the stable branch of your project 
(which is usually the default **master** branch).

To merge the changes from a different branch into your current branch, you can use this 
command:

git merge <branch-name>


You would replace `<branch-name>` with the branch that you want to integrate into your 
current branch.








## Deleting a branch

To delete a branch, you can run the **git branch** command with the **-d** flag:

git branch -d <branch-name>




Push To Git Hub

git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/iamowais11/test.git
git push -u origin main





or push an existing repository from the command line
git remote add origin https://github.com/iamowais11/basic-git-commands.git
git branch -M main
git push -u origin main