### Git Hub Basic Commands
1: git --version
 It should return the Git version that is installed on your computer.

 ### Configuring Your Name & Email
2: git config --global user.name "Your Name"
git config --global user.email "your@email.com"
In your terminal, run the following commands to identify yourself with Git:


### Initializing a repository
3:  git init
This command will generate a hiddenÂ .gitÂ directory for your project, where Git stores all 
internal tracking data for the current repository.


###  Staging and committing code
Before we can commit our code, we need to place it inside the staging area.

###  Checking the status
4: git status
This is a command that is very often used when working with Git.  
It shows us which files have been changed, which files are tracked, etc.

### Staging files

From the project folder, we can use the **git add** command to add our files to the staging area, 
which allows them to be tracked.

We can add a specific file to the staging area with the following command:


5: git add file.js


To add multiple files, we can do this:


6: git add file.js file2.js file3.js

Instead of having to add the files individually, we can also add all the files 
inside the project folder to the staging area:


7: git add .

By default, this adds **all the files and folders** inside the project folder
to the staging area, from where they are ready to be committed and tracked.




### Making commits

 A **commit** is a snapshot of our code at a particular time, which we are saving to 
 the commit history of our repository. After adding all the files that we want to track 
 to the staging area with the `**git add`** command, we are ready to make a commit.

To commit the files from the staging area, we use the following command:


8: git commit -m "Commit message"


Inside the quotes, we should write a **commit message** which is used to identify it in
 the commit history.

The commit message should be a descriptive summary of the changes that you are committing 
to the repository.

After executing that command, you will get the technical details about the commit printed
 in the terminal. And that's basically it, you have successfully made a commit in your
  project!


ðŸ“Œ To create a new commit, you will need to repeat the process of adding files to the 
staging area and then committing them after. Again, it's very useful to use 
the **git status** command to see which files were modified, staged, or untracked.



### Commit history

To see all the commits that were made for our project, you can use the 
following command:
9:  git log
The logs will show details for each commit, like the author name, the generated
 hash for the commit, date and time of the commit, and the commit message that 
we provided.


To go back to a previous state of your project code that you committed, you can use the 
following command:


git checkout <commit-hash>


Replace `<commit-hash>` with the actual hash for the specific commit that you want 
to visit, which is listed with the `git log` command.

To go back to the latest commit (the newest version of our project code), you can type
 this command:
 
git checkout master




## Ignoring files

To ignore files that you don't want to be tracked or added to the staging area, you 
can create a file called `.gitignore` in your main project folder.

Inside of that file, you can list all the file and folder names that you definitely 
do not want to track (each ignored file and folder should go to a new 
line inside the **.gitignore** file).
